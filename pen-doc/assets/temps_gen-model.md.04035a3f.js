import{_ as e,c as s,o as a,a as n}from"./app.12811cf7.js";const C=JSON.parse('{"title":"模型Api生成","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":2,"title":"重写生成文件和生成规则","slug":"重写生成文件和生成规则","link":"#重写生成文件和生成规则","children":[]}],"relativePath":"temps/gen-model.md"}'),o={name:"temps/gen-model.md"},p=n(`<h1 id="模型api生成" tabindex="-1">模型Api生成 <a class="header-anchor" href="#模型api生成" aria-hidden="true">#</a></h1><p>在最新版本pen中，我们提供了模型api生成，这将极大的增加项目开发进度。我们可以通过gorm模型一键完成 <code>model</code>-<code>server</code>-<code>router</code>代码生成。</p><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-hidden="true">#</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">pen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">model</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{you-gen-model-file-path}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># example：</span></span>
<span class="line"><span style="color:#FFCB6B;">pen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">model</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">internal/app/models/kele.go</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>使用后将在项目中将新增</p><p><code>pen_models</code>,<code>pen_{you-model}_server</code>,<code>pen_handler</code>这几个文件夹，</p><p>里面将自动生成模型-&gt;服务-&gt; 路由的完整链接代码，并自动完成注册。</p><h2 id="重写生成文件和生成规则" tabindex="-1">重写生成文件和生成规则 <a class="header-anchor" href="#重写生成文件和生成规则" aria-hidden="true">#</a></h2><p>在使用<code>gen module</code>时，<code>pen</code>将针对模型文件自动生成项目文件，并保证了生产文件和原项目文件进行解耦。 生产文件通常会添加pen前缀以做区分。</p><p>例如在生产的<code>module-server</code>中我们的命名规则为<code>pen_{model}_server</code></p><p>而针对用户扩展的文件为<code>{model}_server/{model}.go</code></p><p>如果用户不小心删除了生成文件，或需要重新生成文件时，只需要删除<code>pen gen</code>生成的文件夹 在重新执行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">pen model {you-gen-model-file-path}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>即可完成生成。</p><div class="warning custom-block"><p class="custom-block-title">注意事项</p><p>生成时并不会把已存在的文件进行覆盖生成，所以你可以放心的调整生成后的文件。</p><p>但建议自定义操作在扩展文件中进行。</p></div>`,15),l=[p];function c(t,d,r,i,h,_){return a(),s("div",null,l)}const g=e(o,[["render",c]]);export{C as __pageData,g as default};
