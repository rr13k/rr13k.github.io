import{_ as s,c as a,o as n,a as p}from"./app.12811cf7.js";const A=JSON.parse('{"title":"插件","description":"","frontmatter":{},"headers":[{"level":2,"title":"开发规则","slug":"开发规则","link":"#开发规则","children":[]},{"level":2,"title":"开发一个基础的插件","slug":"开发一个基础的插件","link":"#开发一个基础的插件","children":[]},{"level":2,"title":"路由中断","slug":"路由中断","link":"#路由中断","children":[]},{"level":2,"title":"插件的执行顺序","slug":"插件的执行顺序","link":"#插件的执行顺序","children":[]}],"relativePath":"temps/plug.md"}'),l={name:"temps/plug.md"},e=p(`<h1 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-hidden="true">#</a></h1><p>插件也叫路由中间件作为路由的过度层, 在日常项目中十分重要。</p><p>我们通常使用中间件进行身份，权限的验证。</p><h2 id="开发规则" tabindex="-1">开发规则 <a class="header-anchor" href="#开发规则" aria-hidden="true">#</a></h2><p>在<code>pen</code>中我们建议将插件放置在<code>/{app-name}/internal/app/api/cmw</code> 目录当中</p><p>例如新建一个权限校验插件，它的路径应该是</p><p><code>/{app-name}/internal/app/api/cmw/permission.go</code></p><h2 id="开发一个基础的插件" tabindex="-1">开发一个基础的插件 <a class="header-anchor" href="#开发一个基础的插件" aria-hidden="true">#</a></h2><p>在<code>pen</code>中我们可以轻松完成插件开发，要实现一个插件，只需要实现一个标准的</p><p><code>func(http.ResponseWriter, *http.Request)</code> .例如:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">net/http</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CheckPermission</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">w http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ResponseWriter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 输出每个请求的路径信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">请求的路径信息:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">URL</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Path</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>如上我们就编写了一个简单的插件，它可以收到请求时打印所有请求的<code>path</code>地址。</p><h2 id="路由中断" tabindex="-1">路由中断 <a class="header-anchor" href="#路由中断" aria-hidden="true">#</a></h2><p>在一些特别的场景中，我们需要在中间件中进行请求的拦截,</p><p>我们可以使用<code>router.SetBreak(r)</code>来进行中断。</p><p>中断后，后续的中间件将不会在执行。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BreakRouter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">w http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ResponseWriter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	url </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://jd.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Redirect</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">w</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">302</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// 中断路由</span></span>
<span class="line"><span style="color:#A6ACCD;">	router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SetBreak</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="插件的执行顺序" tabindex="-1">插件的执行顺序 <a class="header-anchor" href="#插件的执行顺序" aria-hidden="true">#</a></h2><p>一个路由中可以同时使用多个插件，在这里需要注意的是，所有插件从右往左执行。</p><p>例如:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">router.Url(&quot;/ping&quot;, handler.Ping).Use(cmw.plug1).Use(cmw.plug2).Use(cmw.plug3).Use(cmw.plug4)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在上面代码，如果插件中没有进行中断则执行顺序为<code>plug4 -&gt; plug3 -&gt; plug2 -&gt; plug1 -&gt; Ping</code></p>`,22),o=[e];function t(c,r,D,i,F,y){return n(),a("div",null,o)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
